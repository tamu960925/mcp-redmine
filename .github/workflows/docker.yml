name: Docker Build

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  test-docker:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build test image
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        tags: test-image:latest
        cache-from: type=gha

    - name: Test Docker image
      run: |
        # Test image can start and basic health check
        docker run --rm -d --name test-container \
          -e REDMINE_BASE_URL=https://demo.redmine.org \
          -e REDMINE_API_KEY=test-key-12345678 \
          test-image:latest

        # Wait for container to start
        sleep 5

        # Check if container is running
        docker ps | grep test-container

        # Cleanup
        docker stop test-container || true

    - name: Test with docker-compose
      run: |
        # Test docker-compose setup
        REDMINE_BASE_URL=https://demo.redmine.org \
        REDMINE_API_KEY=test-key-12345678 \
        docker-compose up -d

        # Wait for services
        sleep 10

        # Check service health
        docker-compose ps

        # Cleanup
        docker-compose down